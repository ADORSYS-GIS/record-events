// This file is auto-generated by @hey-api/openapi-ts

export const $EventAnnotation = {
    type: 'object',
    description: 'Event annotation with strict typing - matches TypeScript EventAnnotation',
    required: ['labelId', 'value', 'timestamp'],
    properties: {
        labelId: {
            type: 'string'
        },
        timestamp: {
            type: 'string',
            format: 'date-time'
        },
        value: {
            '$ref': '#/components/schemas/FieldValue'
        }
    }
} as const;

export const $EventMedia = {
    type: 'object',
    description: 'Media data with proper typing - matches TypeScript EventMedia',
    required: ['type', 'data', 'name', 'size', 'lastModified'],
    properties: {
        data: {
            type: 'string'
        },
        lastModified: {
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        name: {
            type: 'string'
        },
        size: {
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        type: {
            '$ref': '#/components/schemas/MediaType'
        }
    }
} as const;

export const $EventMetadata = {
    type: 'object',
    description: 'Event metadata - matches TypeScript structure',
    required: ['createdAt', 'source'],
    properties: {
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            type: 'string',
            nullable: true
        },
        source: {
            '$ref': '#/components/schemas/EventSource'
        }
    }
} as const;

export const $EventPackage = {
    type: 'object',
    description: 'Complete event package - matches TypeScript EventPackage',
    required: ['id', 'version', 'annotations', 'metadata'],
    properties: {
        annotations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EventAnnotation'
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        media: {
            allOf: [
                {
                    '$ref': '#/components/schemas/EventMedia'
                }
            ],
            nullable: true
        },
        metadata: {
            '$ref': '#/components/schemas/EventMetadata'
        },
        version: {
            type: 'string'
        }
    }
} as const;

export const $EventPayload = {
    type: 'object',
    description: 'Simple event payload from frontend - file upload notification',
    required: ['filename', 'contentType'],
    properties: {
        contentType: {
            type: 'string'
        },
        filename: {
            type: 'string'
        }
    }
} as const;

export const $EventSource = {
    type: 'string',
    description: 'Event source types - matches TypeScript',
    enum: ['web', 'mobile']
} as const;

export const $FieldValue = {
    oneOf: [
        {
            type: 'string'
        },
        {
            type: 'number',
            format: 'double'
        },
        {
            type: 'boolean'
        },
        {
            type: 'object',
            default: null,
            nullable: true
        }
    ],
    description: 'Supported field value types - matches TypeScript FieldValue'
} as const;

export const $HashVerificationResponse = {
    type: 'object',
    description: 'Response for event hash verification',
    required: ['hash', 'exists'],
    properties: {
        blockNumber: {
            type: 'integer',
            format: 'int64',
            nullable: true,
            minimum: 0
        },
        exists: {
            type: 'boolean'
        },
        hash: {
            type: 'string'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    }
} as const;

export const $HealthResponse = {
    type: 'object',
    description: 'Health check response',
    required: ['status', 'timestamp', 'services', 'version'],
    properties: {
        services: {
            '$ref': '#/components/schemas/ServiceHealthStatus'
        },
        status: {
            type: 'string'
        },
        timestamp: {
            type: 'string',
            format: 'date-time'
        },
        version: {
            type: 'string'
        }
    }
} as const;

export const $MediaType = {
    type: 'string',
    description: 'Supported media types - matches TypeScript MediaType',
    enum: ['image/jpeg', 'image/png', 'image/gif', 'video/mp4']
} as const;

export const $ProcessingResult = {
    type: 'object',
    description: 'Processing result returned after event processing',
    required: ['eventId', 'hash', 'storageLocation', 'processedAt'],
    properties: {
        eventId: {
            type: 'string',
            format: 'uuid'
        },
        hash: {
            type: 'string'
        },
        processedAt: {
            type: 'string',
            format: 'date-time'
        },
        storageLocation: {
            type: 'string'
        }
    }
} as const;

export const $ServiceHealthStatus = {
    type: 'object',
    description: 'Service health status breakdown',
    required: ['storage'],
    properties: {
        storage: {
            type: 'boolean'
        }
    }
} as const;