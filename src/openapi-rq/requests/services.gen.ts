// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PostApiV1EventsData, PostApiV1EventsResponse, PostApiV1EventsPackageData, PostApiV1EventsPackageResponse, PostApiV1EventsUploadData, PostApiV1EventsUploadResponse, GetApiV1EventsByHashVerifyData, GetApiV1EventsByHashVerifyResponse, GetHealthResponse } from './types.gen';

export class EventsService {
    /**
     * Receive and process an event from a relay
     * This is completely stateless - each request is processed independently
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProcessingResult Event processed successfully
     * @throws ApiError
     */
    public static postApiV1Events(data: PostApiV1EventsData): CancelablePromise<PostApiV1EventsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/events',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request - validation failed',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Receive and process an EventPackage from frontend
     * Creates ZIP file and uploads to S3
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Event package processed and stored successfully
     * @throws ApiError
     */
    public static postApiV1EventsPackage(data: PostApiV1EventsPackageData): CancelablePromise<PostApiV1EventsPackageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/events/package',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request - validation failed',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Receive and process a simple event upload notification from frontend
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Upload notification received successfully
     * @throws ApiError
     */
    public static postApiV1EventsUpload(data: PostApiV1EventsUploadData): CancelablePromise<PostApiV1EventsUploadResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/events/upload',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request - validation failed'
            }
        });
    }
    
    /**
     * Verify if an event hash exists in storage
     * Stateless verification - no local state required
     * @param data The data for the request.
     * @param data.hash SHA-256 hash of the event to verify
     * @returns HashVerificationResponse Hash verification completed
     * @throws ApiError
     */
    public static getApiV1EventsByHashVerify(data: GetApiV1EventsByHashVerifyData): CancelablePromise<GetApiV1EventsByHashVerifyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/events/{hash}/verify',
            path: {
                hash: data.hash
            },
            errors: {
                400: 'Bad request - invalid hash format',
                500: 'Internal server error'
            }
        });
    }
    
}

export class HealthService {
    /**
     * Health check endpoint
     * @returns HealthResponse Service is healthy
     * @throws ApiError
     */
    public static getHealth(): CancelablePromise<GetHealthResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/health',
            errors: {
                503: 'Service is unhealthy'
            }
        });
    }
    
}