services:
  # Backend service (Rust EventServer)
  backend:
    build:
      context: ./eventserver
      dockerfile: Dockerfile
    container_name: eventserver-backend
    ports:
      - "8080:8080"
    depends_on:
      minio:
        condition: service_healthy
    environment:
      # Server configuration
      - RUST_LOG=info
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080

      # Storage configuration (MinIO S3-compatible storage, envconfig style)
      - S3_ENDPOINT=${S3_ENDPOINT:-http://minio:9000}
      - S3_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - S3_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - S3_REGION=${S3_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-eventserver-storage}
      - S3_USE_PATH_STYLE=${S3_USE_PATH_STYLE:-true}
      - S3_ENABLE_SSL=${S3_ENABLE_SSL:-false}
      - S3_UPLOAD_TIMEOUT=${S3_UPLOAD_TIMEOUT:-300}
      - S3_MAX_FILE_SIZE=${S3_MAX_FILE_SIZE:-104857600}
      - S3_ALLOWED_MIME_TYPES=${S3_ALLOWED_MIME_TYPES:-image/jpeg,image/png,image/gif,video/mp4}

      # Security configuration
      - JWT_SECRET=${JWT_SECRET:-dummy_jwt_secret_for_development_only}

      # AWS credentials (MinIO compatibility, for legacy tools)
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      # Mount source code for development (optional, comment out for production)
      - ./eventserver/src:/app/src:ro
      - ./eventserver/Cargo.toml:/app/Cargo.toml:ro
      - ./eventserver/Cargo.lock:/app/Cargo.lock:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # MinIO service (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: eventserver-minio
    ports:
      - "9000:9000" # MinIO API
      - "9001:9001" # MinIO Console
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_DEFAULT_BUCKETS=${S3_BUCKET:-eventserver-storage}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # MinIO client for bucket initialization
  minio-init:
    image: minio/mc:latest
    container_name: eventserver-minio-init
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BUCKET=${S3_BUCKET:-eventserver-storage}
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
      mc mb minio/$$MINIO_BUCKET --ignore-existing;
      mc anonymous set public minio/$$MINIO_BUCKET;
      echo 'MinIO bucket $$MINIO_BUCKET initialized successfully';
      "
    networks:
      - app-network
    profiles:
      - init

  # Frontend service (React + Nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: eventserver-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      # API endpoint configuration
      - VITE_API_BASE_URL=http://localhost:8080
      - VITE_APP_TITLE=EventServer
    networks:
      - app-network
    volumes:
      - ./certs:/etc/nginx/certs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Development services (optional, for local development)
  backend-dev:
    build:
      context: ./eventserver
      dockerfile: Dockerfile
      target: development
    container_name: eventserver-backend-dev
    ports:
      - "8081:8080"
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - RUST_LOG=debug
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080

      # Storage configuration (MinIO S3-compatible storage, envconfig style)
      - S3_ENDPOINT=${S3_ENDPOINT:-http://minio:9000}
      - S3_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - S3_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - S3_REGION=${S3_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-eventserver-storage}
      - S3_USE_PATH_STYLE=${S3_USE_PATH_STYLE:-true}
      - S3_ENABLE_SSL=${S3_ENABLE_SSL:-false}
      - S3_UPLOAD_TIMEOUT=${S3_UPLOAD_TIMEOUT:-300}
      - S3_MAX_FILE_SIZE=${S3_MAX_FILE_SIZE:-104857600}
      - S3_ALLOWED_MIME_TYPES=${S3_ALLOWED_MIME_TYPES:-image/jpeg,image/png,image/gif,video/mp4}

      # Security configuration
      - JWT_SECRET=${JWT_SECRET:-dummy_jwt_secret_for_development_only}

      # AWS credentials (MinIO compatibility, for legacy tools)
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      # Mount entire source for hot reloading in development
      - ./eventserver:/app
      - /app/target # Anonymous volume for target directory
    networks:
      - app-network
    profiles:
      - dev
    restart: unless-stopped

  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: eventserver-frontend-dev
    ports:
      - "3001:5173"
    environment:
      - VITE_API_BASE_URL=http://localhost:8081
      - VITE_APP_TITLE=EventServer (Dev)
    volumes:
      # Mount source code for hot reloading
      - .:/app
      - /app/node_modules # Anonymous volume for node_modules
      - /app/eventserver # Exclude eventserver directory
    networks:
      - app-network
    profiles:
      - dev
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
    name: eventserver-network

volumes:
  # Named volumes for persistent data
  backend-target:
    name: eventserver-backend-target
  frontend-node-modules:
    name: eventserver-frontend-node-modules
  minio-data:
    name: eventserver-minio-data
